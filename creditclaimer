// ==UserScript==
// @name         Credit Claimer
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Claim free daily credits automatically.
// @author       You
// @match        https://creator.nightcafe.studio/my-creations?claimTopup=true&n_class=topupReminder&n_medium=email
// @grant        none
// @require      https://cdnjs.cloudflare.com/ajax/libs/luxon/2.1.1/luxon.min.js
// ==/UserScript==

(function () {
    'use strict';

    const CLAIM_BUTTON_TEXT = 'Claim 5 credits';
    const CST_REFRESH_HOUR = 19; // 7 PM in CST

    let guiElement;
    let overlayElement;
    let countdownElement;
    let isScriptRunning = false;
    let debugMode = false;
    const cstTimeZone = 'America/Chicago';
    const luxonNow = luxon.DateTime.now().setZone(cstTimeZone);
    let countdownInterval;

    function createGUIElement() {
        guiElement = document.createElement('div');
        guiElement.id = 'credit-claimer-gui';
        guiElement.style.position = 'fixed';
        guiElement.style.top = '50%';
        guiElement.style.left = '50%';
        guiElement.style.transform = 'translate(-50%, -50%)';
        guiElement.style.padding = '10px';
        guiElement.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        guiElement.style.color = '#fff';
        guiElement.style.zIndex = '9999';
        guiElement.style.fontFamily = 'Arial, sans-serif';
        guiElement.style.fontSize = '14px';
        guiElement.style.borderRadius = '5px';
        guiElement.style.display = 'flex';
        guiElement.style.flexDirection = 'column';
        guiElement.style.alignItems = 'center';
        guiElement.style.userSelect = 'none';
        guiElement.style.cursor = 'move';
        guiElement.addEventListener('mousedown', dragStart);

        const textElement = document.createElement('div');
        textElement.id = 'credit-claimer-text';
        textElement.style.marginBottom = '10px';
        textElement.style.textAlign = 'center';
        guiElement.appendChild(textElement);



        document.body.appendChild(guiElement);
    }

    function updateGUI(content, countdown) {
        const textElement = document.getElementById('credit-claimer-text');
        let countdownElement = document.getElementById('countdown-timer'); // Get the countdown element

        try {
            if (!countdownElement) {
                // If the countdown element doesn't exist, create it
                countdownElement = document.createElement('div');
                countdownElement.id = 'countdown-timer';
                countdownElement.style.textAlign = 'center';
                countdownElement.style.marginTop = '30px';
                countdownElement.style.backgroundColor = 'red';
                countdownElement.style.color = 'white';
                guiElement.appendChild(countdownElement);
                console.log('Countdown element created.');
            }

            if (textElement) {
                textElement.textContent = content;
                console.log('Content updated:', content);
            }

            if (countdownElement) {
                countdownElement.textContent = countdown || ''; // Update the countdown text
                console.log('Countdown updated:', countdown || 'No countdown provided.');
            }
        } catch (error) {
            console.error('Error updating GUI:', error);
        }
    }




    function dragStart(e) {
        const initialX = e.clientX;
        const initialY = e.clientY;
        const initialTop = parseInt(window.getComputedStyle(guiElement).top);
        const initialLeft = parseInt(window.getComputedStyle(guiElement).left);

        function drag(e) {
            const currentX = e.clientX;
            const currentY = e.clientY;
            const offsetX = currentX - initialX;
            const offsetY = currentY - initialY;

            guiElement.style.top = `${initialTop + offsetY}px`;
            guiElement.style.left = `${initialLeft + offsetX}px`;
        }

        function dragEnd() {
            document.removeEventListener('mousemove', drag);
            document.removeEventListener('mouseup', dragEnd);
        }

        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', dragEnd);
    }

    function createOverlayElement() {
        const claimButton = document.querySelector('button[data-is-action-button="true"] span.css-e3l1on');
        if (claimButton) {
            overlayElement = document.createElement('div');
            overlayElement.style.position = 'absolute';
            overlayElement.style.top = '0';
            overlayElement.style.left = '0';
            overlayElement.style.width = '100%';
            overlayElement.style.height = '100%';
            overlayElement.style.backgroundColor = 'rgba(255, 0, 0, 0.3)';
            overlayElement.style.pointerEvents = 'none';
            claimButton.appendChild(overlayElement);
        }
    }

    function removeOverlayElement() {
        if (overlayElement && overlayElement.parentNode) {
            overlayElement.parentNode.removeChild(overlayElement);
            overlayElement = null;
        }
    }

    function toggleScript() {
        if (isScriptRunning) {
            stopScript();
        } else {
            startScript();
        }
    }

    function startScript() {
        if (isScriptRunning) {
            return;
        }

        isScriptRunning = true;
        updateGUI('Script is running...');
        claimCredits();
    }

    function stopScript() {
        isScriptRunning = false;
        updateGUI('Script is stopped.');
    }

    function toggleDebugMode() {
        debugMode = !debugMode;
        updateGUI(`Debug mode: ${debugMode ? 'Enabled' : 'Disabled'}`);

        if (debugMode) {
            guiElement.style.backgroundColor = 'rgba(255, 0, 0, 0.7)';
            guiElement.style.animation = 'pulse 1s infinite';
        } else {
            guiElement.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
            guiElement.style.animation = 'none';
        }
    }
    function claimCredits() {
        if (!isScriptRunning) {
            return;
        }

        const claimButton = document.querySelector('button[data-is-action-button="true"] span.css-e3l1on');
        const moneyEmoji = document.querySelector('span.css-1qep1ct');

        // Use Luxon to get the current time in CST
        const luxonNow = luxon.DateTime.now().setZone(cstTimeZone);

        // Get the current hour, minute, and second in CST
        const currentHour = luxonNow.hour;
        const currentMinutes = luxonNow.minute;
        const currentSeconds = luxonNow.second;

        console.log(`Current time in CST: ${currentHour}:${currentMinutes}:${currentSeconds}`);

        if (claimButton && claimButton.textContent.trim() === CLAIM_BUTTON_TEXT) {
            if (debugMode) {
                createOverlayElement();
                updateGUI('Button found and can be clicked. Debug mode is active. Button not clicked.');
            } else {
                claimButton.click();

                // Calculate the time until 7 PM CST in milliseconds
                const cstRefreshTime = luxonNow.set({ hour: CST_REFRESH_HOUR, minute: 0, second: 0, millisecond: 0 });
                const timeUntilRefresh = cstRefreshTime - luxonNow;

                // Update the countdown timer
                countdownInterval = setInterval(function () {
                    const timeUntilRefresh = cstRefreshTime - luxon.DateTime.now().setZone(cstTimeZone); // Calculate time difference in milliseconds
                    if (timeUntilRefresh <= 0) {
                        clearInterval(countdownInterval);
                        updateGUI('Credits claimed! Waiting until 7 PM CST or sooner before claiming again...', '00:00:00');
                        setTimeout(claimCredits, 1000); // Claim again after a 1-second delay
                    } else {
                        // Format the countdown time in hours, minutes, and seconds
                        const hours = Math.floor(timeUntilRefresh / (60 * 60 * 1000));
                        const minutes = Math.floor((timeUntilRefresh % (60 * 60 * 1000)) / (60 * 1000));
                        const seconds = Math.floor((timeUntilRefresh % (60 * 1000)) / 1000);
                        const formattedCountdown = `${hours} hours, ${minutes} minutes, ${seconds} seconds`;

                        // Update the GUI with the formatted countdown
                        updateGUI('Credits claimed! Waiting until 7 PM CST or sooner before claiming again...', formattedCountdown);
                    }
                }, 1000);
            }
        } else if (moneyEmoji) {
            // The money emoji indicates that credits have been redeemed, so wait for the button.
            removeOverlayElement();
            updateGUI("Today's credits have been claimed. Waiting until 7 PM CST or sooner for the button to become available...");
            setTimeout(claimCredits, 5000); // Check again in 5 seconds
        } else {
            removeOverlayElement();
            updateGUI('Button not found or not available yet. Retrying in 5 seconds...');
            setTimeout(claimCredits, 5000);
        }
    }


    function createGUI() {
        createGUIElement();

        const startStopButton = document.createElement('button');
        startStopButton.textContent = 'Start/Stop';
        startStopButton.style.marginBottom = '10px';
        startStopButton.addEventListener('click', toggleScript);
        guiElement.appendChild(startStopButton);

        const debugModeToggle = document.createElement('input');
        debugModeToggle.type = 'checkbox';
        debugModeToggle.id = 'debug-mode-toggle';
        debugModeToggle.checked = debugMode;
        debugModeToggle.addEventListener('change', toggleDebugMode);

        const debugModeLabel = document.createElement('label');
        debugModeLabel.htmlFor = 'debug-mode-toggle';
        debugModeLabel.textContent = 'Debug Mode';

        guiElement.appendChild(debugModeToggle);
        guiElement.appendChild(debugModeLabel);
    }

    function loadGUI() {
        const existingGUI = document.getElementById('credit-claimer-gui');
        if (existingGUI) {
            guiElement = existingGUI;
            updateGUI('Script is stopped.');
        } else {
            createGUI();
            guiElement = document.getElementById('credit-claimer-gui');
            updateGUI('Script is stopped.');
        }
    }

    function saveScriptState() {
        localStorage.setItem('creditClaimerState', JSON.stringify({
            isScriptRunning: isScriptRunning,
            debugMode: debugMode
        }));
    }

    function loadScriptState() {
        const storedState = localStorage.getItem('creditClaimerState');
        if (storedState) {
            const parsedState = JSON.parse(storedState);
            isScriptRunning = parsedState.isScriptRunning;
            debugMode = parsedState.debugMode;
        }
    }

    function init() {
        loadGUI();
        loadScriptState();

        if (isScriptRunning) {
            claimCredits();
        }
    }

    window.addEventListener('beforeunload', saveScriptState);
    init();
})();
